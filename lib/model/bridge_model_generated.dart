// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library model;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Options {
  Options._(this._bc, this._bcOffset);
  factory Options(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Options> reader = _OptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get comment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get email => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get passphrase => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'Options{name: ${name}, comment: ${comment}, email: ${email}, passphrase: ${passphrase}}';
  }
}

class _OptionsReader extends fb.TableReader<Options> {
  const _OptionsReader();

  @override
  Options createObject(fb.BufferContext bc, int offset) => 
    Options._(bc, offset);
}

class OptionsBuilder {
  OptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addCommentOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEmailOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPassphraseOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OptionsObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _comment;
  final String? _email;
  final String? _passphrase;

  OptionsObjectBuilder({
    String? name,
    String? comment,
    String? email,
    String? passphrase,
  })
      : _name = name,
        _comment = comment,
        _email = email,
        _passphrase = passphrase;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? commentOffset = _comment == null ? null
        : fbBuilder.writeString(_comment!);
    final int? emailOffset = _email == null ? null
        : fbBuilder.writeString(_email!);
    final int? passphraseOffset = _passphrase == null ? null
        : fbBuilder.writeString(_passphrase!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, commentOffset);
    fbBuilder.addOffset(2, emailOffset);
    fbBuilder.addOffset(3, passphraseOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StringResponse {
  StringResponse._(this._bc, this._bcOffset);
  factory StringResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StringResponse> reader = _StringResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get output => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'StringResponse{output: ${output}, error: ${error}}';
  }
}

class _StringResponseReader extends fb.TableReader<StringResponse> {
  const _StringResponseReader();

  @override
  StringResponse createObject(fb.BufferContext bc, int offset) => 
    StringResponse._(bc, offset);
}

class StringResponseBuilder {
  StringResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StringResponseObjectBuilder extends fb.ObjectBuilder {
  final String? _output;
  final String? _error;

  StringResponseObjectBuilder({
    String? output,
    String? error,
  })
      : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset = _output == null ? null
        : fbBuilder.writeString(_output!);
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class BytesResponse {
  BytesResponse._(this._bc, this._bcOffset);
  factory BytesResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BytesResponse> reader = _BytesResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get output => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'BytesResponse{output: ${output}, error: ${error}}';
  }
}

class _BytesResponseReader extends fb.TableReader<BytesResponse> {
  const _BytesResponseReader();

  @override
  BytesResponse createObject(fb.BufferContext bc, int offset) => 
    BytesResponse._(bc, offset);
}

class BytesResponseBuilder {
  BytesResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutputOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BytesResponseObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _output;
  final String? _error;

  BytesResponseObjectBuilder({
    List<int>? output,
    String? error,
  })
      : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputOffset = _output == null ? null
        : fbBuilder.writeListUint8(_output!);
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, outputOffset);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class BoolResponse {
  BoolResponse._(this._bc, this._bcOffset);
  factory BoolResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<BoolResponse> reader = _BoolResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get output => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'BoolResponse{output: ${output}, error: ${error}}';
  }
}

class _BoolResponseReader extends fb.TableReader<BoolResponse> {
  const _BoolResponseReader();

  @override
  BoolResponse createObject(fb.BufferContext bc, int offset) => 
    BoolResponse._(bc, offset);
}

class BoolResponseBuilder {
  BoolResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutput(bool? output) {
    fbBuilder.addBool(0, output);
    return fbBuilder.offset;
  }
  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BoolResponseObjectBuilder extends fb.ObjectBuilder {
  final bool? _output;
  final String? _error;

  BoolResponseObjectBuilder({
    bool? output,
    String? error,
  })
      : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addBool(0, _output);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IntResponse {
  IntResponse._(this._bc, this._bcOffset);
  factory IntResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IntResponse> reader = _IntResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get output => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'IntResponse{output: ${output}, error: ${error}}';
  }
}

class _IntResponseReader extends fb.TableReader<IntResponse> {
  const _IntResponseReader();

  @override
  IntResponse createObject(fb.BufferContext bc, int offset) => 
    IntResponse._(bc, offset);
}

class IntResponseBuilder {
  IntResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addOutput(int? output) {
    fbBuilder.addInt64(0, output);
    return fbBuilder.offset;
  }
  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IntResponseObjectBuilder extends fb.ObjectBuilder {
  final int? _output;
  final String? _error;

  IntResponseObjectBuilder({
    int? output,
    String? error,
  })
      : _output = output,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    fbBuilder.startTable(2);
    fbBuilder.addInt64(0, _output);
    fbBuilder.addOffset(1, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
